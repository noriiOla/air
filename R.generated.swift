//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `airImage`.
    static let airImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "airImage")
    /// Image `ladne`.
    static let ladne = Rswift.ImageResource(bundle: R.hostingBundle, name: "ladne")
    /// Image `settingsImage`.
    static let settingsImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsImage")
    /// Image `smog`.
    static let smog = Rswift.ImageResource(bundle: R.hostingBundle, name: "smog")
    /// Image `umiark`.
    static let umiark = Rswift.ImageResource(bundle: R.hostingBundle, name: "umiark")
    
    /// `UIImage(named: "airImage", bundle: ..., traitCollection: ...)`
    static func airImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.airImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ladne", bundle: ..., traitCollection: ...)`
    static func ladne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ladne, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settingsImage", bundle: ..., traitCollection: ...)`
    static func settingsImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "smog", bundle: ..., traitCollection: ...)`
    static func smog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "umiark", bundle: ..., traitCollection: ...)`
    static func umiark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.umiark, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `MeasureStationHeader`.
    static let measureStationHeader = _R.nib._MeasureStationHeader()
    /// Nib `MeasureStationTableViewCell`.
    static let measureStationTableViewCell = _R.nib._MeasureStationTableViewCell()
    
    /// `UINib(name: "MeasureStationHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.measureStationHeader) instead")
    static func measureStationHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.measureStationHeader)
    }
    
    /// `UINib(name: "MeasureStationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.measureStationTableViewCell) instead")
    static func measureStationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.measureStationTableViewCell)
    }
    
    static func measureStationHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeasureStationHeader? {
      return R.nib.measureStationHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeasureStationHeader
    }
    
    static func measureStationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeasureStationTableViewCell? {
      return R.nib.measureStationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeasureStationTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Data`.
    static let data = _R.storyboard.data()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MeasureStationsView`.
    static let measureStationsView = _R.storyboard.measureStationsView()
    
    /// `UIStoryboard(name: "Data", bundle: ...)`
    static func data(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.data)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MeasureStationsView", bundle: ...)`
    static func measureStationsView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.measureStationsView)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MeasureStationHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MeasureStationHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeasureStationHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeasureStationHeader
      }
      
      fileprivate init() {}
    }
    
    struct _MeasureStationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MeasureStationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeasureStationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeasureStationTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try data.validate()
      try launchScreen.validate()
      try measureStationsView.validate()
    }
    
    struct data: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DataViewController
      
      let bundle = R.hostingBundle
      let name = "Data"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct measureStationsView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "MeasureStationsView"
      
      static func validate() throws {
        if UIKit.UIImage(named: "airImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'airImage' is used in storyboard 'MeasureStationsView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
